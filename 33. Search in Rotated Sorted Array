33. Search in Rotated Sorted Array
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly left rotated at an unknown index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be left rotated by 3 indices and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

class Solution {
    public int search(int[] nums, int target) {
        int pivotNo=pivotElement(nums);
        //if no pivotNo found, ie no rotated arr , do normal binary search
        if(pivotNo==-1){
           return binarySearch(nums,target,0,nums.length-1);
        }
        //if pivot is equal to target
        if(nums[pivotNo]==target){
            return pivotNo;
        }

        //if pivot, u have find out 2 ascending array
      //if target>start element than check it from (0,pivotNo-1)
      if(target>=nums[0]){
        return binarySearch(nums,target,0,pivotNo-1);
      } 
       //if target<start element than check it from (pivotNo+1,nums.length-1)
      return binarySearch(nums,target,pivotNo+1,nums.length-1);

    }
    public int binarySearch(int[] nums,int target,int start,int end){
        while(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]>target){
                end=mid-1;
            }else{
                start=mid+1;
            }
        }
        return -1;
    }
    public int pivotElement(int[] nums){
        int start=0;
        int end=nums.length-1;
        while(start<end){
            int mid=start+(end-start)/2;
            if(mid<end && nums[mid]>nums[mid+1]){
               return mid;
            }
            if(mid>start && nums[mid]<nums[mid-1]){
                return mid-1;
            }
            if(nums[mid]<=nums[start]){//bcz pivot no is bigger no so all the elemnt in right side will be small only
              end=mid-1;
            }
            else{
                start=mid+1;
            }
            
        }
        return -1;
    }
}
