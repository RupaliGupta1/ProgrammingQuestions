1095. Find in Mountain Array
Solved
Hard
Topics
premium lock icon
Companies
Hint
(This problem is an interactive problem.)

You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target. If such an index does not exist, return -1.

You cannot access the mountain array directly. You may only access the array using a MountainArray interface:

MountainArray.get(k) returns the element of the array at index k (0-indexed).
MountainArray.length() returns the length of the array.
Submissions making more than 100 calls to MountainArray.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

 

Example 1:

Input: mountainArr = [1,2,3,4,5,3,1], target = 3
Output: 2
Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.


/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 Approach- 1- find peak element
           2- search on left arr
           3- search on right side arr


class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int peak=findPeakElement(mountainArr);
        int firstArrLeft=binarySearch(target,mountainArr,0,peak,true);
        if(firstArrLeft!=-1){
            return firstArrLeft;
        }
        int secondArrRight=binarySearch(target,mountainArr,peak+1,mountainArr.length()-1,false);
        return secondArrRight;

    }
    public int binarySearch(int target, MountainArray mountainArr,int start,int end,boolean isAsc){

        while(start<=end){
            int mid=start+(end-start)/2;
            if(mountainArr.get(mid)==target){
                return mid;
            }
            if(isAsc){
                if(mountainArr.get(mid)>target){
                    end=mid-1;
                }
                else{
                    start=mid+1;
                }
            }
            else{
                    if(mountainArr.get(mid)>target){
                    start=mid+1;
                }
                else{
                    end=mid-1;
                }
            }
        }
        return -1;
    }
    public int findPeakElement(MountainArray mountainArr){
                int start=0;
        int end=mountainArr.length()-1;
        int index=-1;
        while(start<end){
            int mid=start+(end-start)/2;
            if(mountainArr.get(mid)>mountainArr.get(mid+1)){
                end=mid;
            }
            else{
                start=mid+1;
            }
        }
        return start;
    }
}
